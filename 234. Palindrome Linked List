/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* reverseList(ListNode* head) {

        // ListNode *temp = head;
        // ListNode *prev = nullptr;
        // while (temp != nullptr)
        // {
        //     ListNode *front = temp->next;
        //     temp->next = prev;
        //     prev = temp;
        //     temp = front;
        // }
        // return prev;


        //using Recursion

        if (head == nullptr || head->next == nullptr)
        {
            return head;
        }

        ListNode *newHead = reverseList(head->next);
        ListNode *front = head->next;
        front->next = head;
        head->next = nullptr;
        return newHead;

        
    }


    bool isPalindrome(ListNode* head) {
        ListNode *fast = head;
        ListNode *slow = head;

        while (fast->next != nullptr && fast->next->next!=nullptr)
        {
            fast = fast->next->next;
            slow = slow->next;
        }

        ListNode *newHead = reverseList(slow->next);
        ListNode *first = head;
        ListNode *second = newHead;

        while (second != nullptr)
        {
            if (first->val != second->val)
            {
                reverseList(newHead);
                return false;
            }
            first = first->next;
            second = second->next;
        }

        reverseList(newHead);
        return true;

    }
};
